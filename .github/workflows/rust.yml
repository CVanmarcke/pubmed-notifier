name: Rust Release

on:
  push:
    tags:
      - '*'  # Run on any tag push

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  release:
    name: Release - ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        include:
          - os-name: Linux-x86_64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build-type: ubuntu
          - os-name: Alpine-x86_64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build-type: alpine
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache cargo registry and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Build binary (Alpine in Docker)
        if: matrix.build-type == 'alpine'
        run: |
          docker run --rm -v "$PWD":/volume -w /volume rust:alpine sh -c '
            apk add --no-cache musl-dev openssl-dev openssl sqlite-dev sqlite sqlite-static pkgconfig clang make && \
            cargo build --release && \
            mkdir -p dist && \
            cp target/release/rssnotify dist/rssnotify-alpine-x86_64
          '
      - name: Build binary (Ubuntu)
        if: matrix.build-type == 'ubuntu'
        run: |
          cargo build --release
          mkdir -p dist
          cp target/release/rssnotify dist/rssnotify-linux-x86_64
      - name: Prepare binary for upload
        run: |
          mkdir -p dist
          if [ "${{ matrix.build-type }}" = "alpine" ]; then
            cp target/x86_64-unknown-linux-musl/release/rssnotify dist/rssnotify-alpine-x86_64
          else
            cp target/release/rssnotify dist/rssnotify-linux-x86_64
          fi
      - name: Upload binary to tag release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/rssnotify-alpine-x86_64
            dist/rssnotify-linux-x86_64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update 'latest' release with binary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f dist/rssnotify-alpine-x86_64 ]; then
            gh release view latest || gh release create latest dist/rssnotify-alpine-x86_64 --title "Latest" --notes "Latest build (Alpine)" --prerelease
            gh release upload latest dist/rssnotify-alpine-x86_64 --clobber
          fi
          if [ -f dist/rssnotify-linux-x86_64 ]; then
            gh release view latest || gh release create latest dist/rssnotify-linux-x86_64 --title "Latest" --notes "Latest build (Linux)" --prerelease
            gh release upload latest dist/rssnotify-linux-x86_64 --clobber
          fi
